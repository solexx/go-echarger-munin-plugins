#!/bin/bash
# -*- bash -*-

#set -x
#set -u

: << =cut

=head1 NAME

go_echarger_power - Plugin to monitor go-eCharger status

=head1 CONFIGURATION

You just need to set the host like this:

 [go-echarger-*]
 env.host go-echarger.home.well-adjusted.de

=head1 AUTHORS

=over

=item 2021.05.02 Initial version by Jochen Spieker <js@wim.re>

=back

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

host=${host:-go-echarger}

get_status() {
	curl -s http://${host}/mqtt
}

get_info() {
	get_status | jq ".${1} | tonumber"
}


case $1 in
	config)
        cat <<EOF
graph_title go-eCharger State
graph_args --lower-limit 0
graph_info go-eCharger state information
graph_category go_eCharger
graph_printf %0.1lf
graph_data_size custom 7d, 30m for 30d, 2h for 365d, 1d for 3650d
EOF

		echo "adi.info 0=No adapter; 1=16A adapter present"
		echo "adi.label 16A Adapter Present"
		echo "alw.info 0=Charging not allowed; 1=Charging allowed"
		echo "alw.label Charging Allowed"
		echo "ast.info 0=Open; 1=Locked; 2=Automatic"
		echo "ast.label Access Control"
		echo "car.info 1=Ready, no car; 2=Charging; 3=Waiting for car; 4=Charging finished, car still connected"
		echo "car.label Charging State"
		echo "err.info 1=RCCB; 3=PHASE; 8: NO_GROUND; 10=INTERNAL"
		echo "err.label Error"
		echo "loe.info 0=Capacity management disabled; 1=Capacity management enabled"
		echo "loe.label Capacity Management"
		echo "lse.info 0=LED energy saving disabled; 1=LED energy saving enabled"
		echo "lse.label LED Energy Saving"
		echo "mcc.info 0=Custom MQTT server not connected; 1=Custom MQTT server connected"
		echo "mcc.label MQTT Connected"
		echo "mce.info 0=Custom MQTT server disabled; 1=Custom MQTT server enabled"
		echo "mce.label MQTT Enabled"
		echo "nmo.info 0=Norway mode disabled; 1=Norway mode enabled (grounding detection disabled)"
		echo "nmo.label Norway Mode"
		echo "ust.info 0=Cable locked while connected; 1=Unlock after charging; 2=Always locked"
		echo "ust.label Cable Lock Policy"
		echo "wen.info 0=Wifi disabled; 1=Wifi enabled"
		echo "wen.label Wifi Enabled"
		echo "wst.info 3=Wifi connected"
		echo "wst.label Wifi Connected"

        exit 0
		;;
	autoconf)
		if echo "" | nc -q1 "$host" "80" > /dev/null 2>&1 ; then
			echo "yes"
		else
			echo "no (Connection to ${host}:80 failed.)"
		fi
		exit 0
		;;
esac 

for state in car err ast alw adi wst wen lse ust nmo loe mce mcc; do
	echo "${state}.value $(get_info ${state})"
done


exit 0
